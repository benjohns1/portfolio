{
    "version": "https://jsonfeed.org/version/1",
    "title": "Ben Johns | Creator & Software Engineer",
    "home_page_url": "http://localhost:3000/",
    "feed_url": "http://localhost:3000/feed/rss.json",
    "icon": "http://localhost:3000//images/headshot2_512x512.jpg",
    "author": {
        "name": "Ben Johns",
        "url": "http://localhost:3000"
    },
    "items": [
        {
            "id": "http://localhost:3000/posts/20240105-blinkfile",
            "content_html": "<p>After trying out many of the other open-source options available, I decided to write a simple app to send files quickly and securely.</p>\n<ul>\n<li>Containerized web app written in Go &amp; vanilla Javascript</li>\n<li>Upload a file and generate sharable links</li>\n<li>Single admin user authentication</li>\n<li>File expiration time can be set by duration or date</li>\n<li>Password-protect file access</li>\n</ul>\n<p><a href=\"https://github.com/benjohns1/blinkfile\">View Source</a></p>",
            "url": "http://localhost:3000/posts/20240105-blinkfile",
            "title": "BlinkFile",
            "summary": "Send files quickly and securely",
            "date_modified": "2024-01-05T12:50:00.000Z",
            "author": {
                "name": "Ben Johns",
                "url": "http://localhost:3000"
            }
        },
        {
            "id": "http://localhost:3000/posts/20240103-foundant-technologies",
            "content_html": "<h3 id=\"solutions-for-philanthropy\">Solutions for Philanthropy</h3>\n<p><a href=\"https://www.foundant.com\">Foundant Technologies</a> makes philanthropy easier and more impactful for funders, nonprofits, scholarship providers, and community foundations.</p>\n<p>From October 2019 to December 2023, I led and worked on a variety of teams to solve accounting, fundraising, and CRM needs for nonprofits. I was an advocate for iterative, test-driven, and continuous delivery practices with domain-driven design and event storming. I also had the opportunity to mentor juniors and new engineering hires during a period of rapid growth, practice pair programming, and give numerous lunch &amp; learns on a wide variety of topics.</p>\n<p>I built, monitored, and maintained dozens of customer-facing back-end services and front-end UIs. To support these services, we created an event-driven microservice platform on AWS with Terraform, Go, Docker, and Vue.js. I also implemented cross-cutting platform utilities for authentication, authorization, REST API generation, CI/CD pipelines, event sourcing, and new service generation.</p>",
            "url": "http://localhost:3000/posts/20240103-foundant-technologies",
            "title": "Foundant Technologies",
            "summary": "Software solutions for philanthropy",
            "date_modified": "2024-01-03T18:02:00.000Z",
            "author": {
                "name": "Ben Johns",
                "url": "http://localhost:3000"
            }
        },
        {
            "id": "http://localhost:3000/posts/20210116-orchestrate-or-choreograph",
            "content_html": "<p>When building a distributed system it's important to consider how to handle business flows that span across multiple aggregates or services. Firstly, we should try to simplify the flow so that a single user action only modifies one aggregate at a time. But sometimes that is not possible so we must decide how to coordinate our components.</p>\n<p><em>Orchestration</em> is when a central controller manages the interactions between services; it explicitly models business logic in one place. In microservice terminology, this is called the <em>Saga</em> pattern.</p>\n<p><em>Choreography</em> is when services communicate by emitting and listening to events; it fully decouples communication.</p>\n<p>Both of these approaches are useful in different situations. At the end of this post I boil this \"it depends\" down to a simple rule of thumb. I use terminology in the examples from domain-driven design and microservice architectures, but this is also relevant for monolithic systems.</p>\n<p>For the examples below, imagine we're designing a travel booking system that allows end-users to book a trip across multiple travel services, such as airlines, hotels, rental car agencies, etc.</p>\n<h2 id=\"cross-context-example\">Cross-Context Example</h2>\n<p>We need to communicate between two subdomains that have different business responsibilities, each managed by separate engineering teams. The subdomains are implemented as bounded contexts:</p>\n<ol>\n<li><strong>Booking</strong> allows an end-user to book services with external providers.</li>\n<li><strong>CRM</strong> allows external providers to manage their end-user customer base and communications.</li>\n</ol>\n<p>In Booking, the end-user creates an account with a basic email. CRM eventually needs to know about that user account and create a profile, so that our providers can track their communication history and preferences.</p>\n<h3 id=\"orchestration\">Orchestration</h3>\n<p>The Booking context, acting as an orchestrator, sends a direct command to CRM to create a new user profile.</p>\n<p><em>Pros:</em></p>\n<ul>\n<li>Booking's code explicitly shows each context with which it is communicating.</li>\n</ul>\n<p><em>Cons:</em></p>\n<ul>\n<li>Booking directly depends on CRM's command structure.</li>\n<li>If another system wants to know about booking accounts, Booking must also be updated.</li>\n<li>Booking's responsibility bleeds into needing to directly communicate with other contexts.</li>\n</ul>\n<h3 id=\"choreography\">Choreography</h3>\n<p>Using choreography, on the other hand, Booking emits a User Account Created event, then the CRM listens to the event and creates a new user profile.</p>\n<p><em>Pros:</em></p>\n<ul>\n<li>Booking has no need to know that CRM is listening.</li>\n<li>If another system wants to know about booking user accounts, they simply need to listen to the event.</li>\n<li>Booking's responsibility is solely focused on booking travel, and not communicating with other contexts.</li>\n</ul>\n<p><em>Cons:</em></p>\n<ul>\n<li>It takes more work to determine who is reacting to the events.</li>\n<li>CRM needs to keep track of which events it has processed, and ensure it doesn't miss any.</li>\n</ul>\n<h3 id=\"winner-for-cross-context-communication\">Winner for Cross-Context Communication?</h3>\n<p><strong>Choreography!</strong></p>\n<ul>\n<li>Decoupling across bounded contexts is extremely important.</li>\n<li>Specific business flows shouldn't span across multiple contexts (if they do, then the boundaries should be re-thought).</li>\n<li>If CRM needs to create user profiles based on other events from other contexts, it is the CRM's responsibility to know about that and listen for them.</li>\n</ul>\n<h2 id=\"in-context-example\">In-Context Example</h2>\n<p>Within the Booking bounded context, there are multiple services: Reservation, Provider, and Payment.</p>\n<p>A user completes a reservation for multiple travel services then enters payment details. When the user confirms, the travel reservation is confirmed for each external service provider, then the payment is processed.</p>\n<h3 id=\"orchestration-1\">Orchestration</h3>\n<p>The Reservation service, acting as an orchestrator, sends a direct command to the Provder service (which communicates to the external travel providers), and if all succeed, sends a direct command to the Payment service.</p>\n<p><em>Pros:</em></p>\n<ul>\n<li>The Reservation service code clearly shows the order in which the business logic is executed.</li>\n</ul>\n<p><em>Cons:</em></p>\n<ul>\n<li>The Reservation service directly depends on the Provider and Payment services' command structures.</li>\n<li>When another provider or service needs to needs to be added to the reservation flow, the Reservation service must be updated.</li>\n<li>The Reservation service responsibility includes communicating with the Provider and Payment services.</li>\n<li>The Reservation service must handle compensating actions if a failure occurs anywhere in the flow.</li>\n</ul>\n<h3 id=\"choreography-1\">Choreography</h3>\n<p>Using choreography:</p>\n<ol>\n<li>The Reservation service emits a Reservation Created event.</li>\n<li>The Provider service handles this event and communicates with the external service providers.</li>\n<li>The Payment service handles this event and processes payment.</li>\n<li>Upon failure, compensating events must be emitted and handled where appropriate.</li>\n</ol>\n<p><em>Pros:</em></p>\n<ul>\n<li>The Reservation service doesn't need to know about the other services.</li>\n<li>If another system wants to know about reservations, they just need to listen to the events.</li>\n<li>Reservation's responsibility is solely focused on creating reservations in our system, and not coordinating with other services.</li>\n</ul>\n<p><em>Cons:</em></p>\n<ul>\n<li>It is hard to follow the basic business logic that a reservation entry results in a provider reservation and a processed payment.</li>\n<li>To view the current state of the end-user's reservation and payment, one must directly query the Provider and Payment services, or listen to a large number of events, including compensations events if a failure occurred.</li>\n</ul>\n<h3 id=\"winner-for-in-context-communication\">Winner for In-Context Communication?</h3>\n<p><strong>Orchestration!</strong></p>\n<ul>\n<li>The business logic is very clear and in one place; the Reservation service orchestrates it.</li>\n<li>Even though there is direct service-to-service communication, it does <em>not</em> need to be synchronous. We can still use decoupled asynchronous communication practices.</li>\n<li>Minimal coupling within a bounded context is okay, because business logic sometimes must flow across multiple services.</li>\n<li>Events could <em>still</em> be emitted by each service when something happens, in case external contexts need to know.</li>\n</ul>\n<h2 id=\"choosing-an-approach\">Choosing an Approach</h2>\n<p>The entire business logic flow is modeled explicitly in a single place with orchestration, whereas it emerges from the interaction between components with orchestration.</p>\n<p><strong>Rule of Thumb:</strong> <em>Use orchestration within a single bounded context to model a single business flow; use choreography to communicate across bounded contexts.</em></p>\n<p>If you encounter business flows that span across multiple bounded contexts, making it difficult to use choreography, it might be an indicator to reconsider your domain boundaries.</p>\n<h2 id=\"references\">References</h2>\n<p>Directly relevant:</p>\n<ul>\n<li><a href=\"https://theburningmonk.com/2020/08/choreography-vs-orchestration-in-the-land-of-serverless\">Choreography vs Orchestration in the land of serverless by Yan Cui</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=IBfuKA9Nc3M\">GOTO 2020 - Automating Processes in Modern Architectures by Bernd Ruecker</a></li>\n</ul>\n<p>Where to capture orchestration logic:</p>\n<ul>\n<li><a href=\"https://blog.bennyjohns.com/2020/12/domain-vs-application-logic.html\">Domain vs Application Logic by Ben Johns</a></li>\n<li><a href=\"http://gorodinski.com/blog/2012/04/14/services-in-domain-driven-design-ddd/\">Services in Domain-Driven Design (DDD) by Lev Gorodinski</a></li>\n<li><a href=\"https://enterprisecraftsmanship.com/posts/what-is-domain-logic/\">What is domain logic? by Vladimir Khorikov</a></li>\n</ul>",
            "url": "http://localhost:3000/posts/20210116-orchestrate-or-choreograph",
            "title": "Orchestrate or Choreograph?",
            "summary": "When is it appropriate to use centralized orchestration versus event-driven choreography?",
            "date_modified": "2021-01-16T22:42:00.000Z",
            "author": {
                "name": "Ben Johns",
                "url": "http://localhost:3000"
            }
        },
        {
            "id": "http://localhost:3000/posts/20201206-domain-vs-application-logic",
            "content_html": "<h1 id=\"domain-vs-application-logic-in-domain-driven-design\">Domain vs Application Logic in Domain-Driven Design</h1>\n<h2 id=\"problem-vs-solution-space\">Problem vs Solution Space</h2>\n<p>When defining a business problem and planning its solution, keep the two conversations separate so that the problem is understood in as much detail as possible first. Business logic is part of the <em>Solution Space</em> so should be discussed only after thoroughly understanding the problem.</p>\n<ul>\n<li>The <em>Problem Space</em> identifies the purpose, the \"why\".</li>\n<li>The <em>Solution Space</em> is the \"how\".</li>\n</ul>\n<p>Common DDD terminology falls into each category:</p>\n<h4 id=\"problem-space\">Problem Space</h4>\n<ul>\n<li>Domain</li>\n<li>Problem Domain</li>\n<li>Core Domain</li>\n<li>Subdomain</li>\n</ul>\n<h4 id=\"solution-space\">Solution Space</h4>\n<ul>\n<li>Business Logic</li>\n<li>Business Rules</li>\n<li>Domain Logic</li>\n<li>Bounded Context</li>\n</ul>\n<p>The terms Domain, Problem Domain, Core Domain are synonymous, as are Business Logic, Business Rules, and Domain Logic; these terms are used interchangeably.</p>\n<p>After understanding the problem space, we can dig in to the rules that solve the business problem and encode this domain knowledge in explicit logic.</p>\n<p>This <em>Business Logic</em> solves the problem at hand but does <em>not</em> address implementation details such as database technology, API definitions, web frameworks, etc. Our business logic should encode what rules are needed to solve the problem with language everyone can understand.</p>\n<h2 id=\"keep-things-simple\">Keep Things Simple</h2>\n<h3 id=\"business-logic\">Business Logic</h3>\n<p>Business logic should be created in collaboration with business experts. Our <em>primary purpose</em> as software engineers is to convert that logic into an implementation that can be executed.</p>\n<p>So, let's <strong>keep things simple</strong> and separate our domain model from the application details. If we capture the business logic in an isolated area of our code, write the code using terms anyone can understand from the problem domain, and keep all application details out of this area, it is much easier to understand the purpose of the solution and update the business rules when needed.</p>\n<p>How do we know what the domain logic is? Ask whether the code makes decisions that have business meaning. Any <em>business-critical</em> decision should be done in the domain logic; everything else is wiring.</p>\n<h3 id=\"application-logic\">Application Logic</h3>\n<p>This wiring code is the <em>Application Logic</em>. This layer sadly represents the bulk of complexity and effort in many systems, despite the fact that it is simply <em>necessary</em> and has minimal impact on your business's competitive edge: a topic for another day.</p>\n<p>The application logic orchestrates executing the business logic and all of the infrastructure details like persistence, UI, external system communication, etc. The application layer hosts an environment for executing domain logic; it collects and transforms external input into forms that the business logic uses to make decisions.</p>\n<p>Usually the application layer communicates using primitive data types and converts them into domain-specific data types for clarity.</p>\n<h2 id=\"application-architecture\">Application Architecture</h2>\n<p>In order for the application layer to do its job of <em>orchestration</em>, it is helpful to further separate implementation details of specific technologies into adapters. Uncle Bob's Clean Architecture is a wonderful approach to this.</p>\n<h3 id=\"infrastructure\">Infrastructure</h3>\n<p>Infrastructure adapter implementations could include management of the following application concerns, for example:</p>\n<ul>\n<li>Data persistence (e.g. in-memory, MySQL, file system, DynamoDB)</li>\n<li>User notifications (e.g. email, SMS)</li>\n<li>Web API (e.g. REST, GraphQL, web socket)</li>\n<li>UI frameworks</li>\n</ul>\n<h3 id=\"dependency-inversion\">Dependency Inversion</h3>\n<p>Each infrastructure adapter can implement an interface that is defined in the application layer. During startup the implementation can be instantiated and dependency injected into the application layer. This isolates the application layer from infrastructure changes, which has the massive benefit of allowing an effort like swapping a database technology to not require a full application rewrite; only the infrastructure adapter needs to be re-implemented against the same interface.</p>\n<p>This leads to a dependency flow where the detailed infrastructure implementations depend on the application layer, and the application layer depends on the domain logic. Our domain logic is kept pristine without any external dependencies.</p>\n<ul>\n<li>Infrastructure Adapter (e.g. DB, REST API, external service communication) depends on -&gt;</li>\n<li>Application Logic (orchestrates the flow of requests and executes business logic) depends on -&gt;</li>\n<li>Business Logic (makes business-critical decisions) depends on nothing</li>\n</ul>\n<h2 id=\"references\">References</h2>\n<ul>\n<li><a href=\"https://www.amazon.com/Implementing-Domain-Driven-Design-Vaughn-Vernon-ebook-dp-B00BCLEBN8/dp/B00BCLEBN8\">Implementing Domain-Driven Design</a> Vaughn Vernon</li>\n<li><a href=\"https://www.amazon.com/Domain-Driven-Design-Distilled-Vaughn-Vernon/dp/0134434420\">Domain Driven Design Distilled</a> by Vaughn Vernon</li>\n<li><a href=\"https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html\">The Clean Architecture</a> by Robert C. Martin 2012-08-13</li>\n<li><a href=\"https://enterprisecraftsmanship.com/posts/what-is-domain-logic/\">What is domain logic?</a> by Vladimir Khorikov 2016-08-25</li>\n<li><a href=\"http://gorodinski.com/blog/2012/04/14/services-in-domain-driven-design-ddd/\">Services in Domain-Driven Design</a> by Lev Gorodinski 2012-04-14</li>\n<li><a href=\"https://softwareengineering.stackexchange.com/questions/140999/application-layer-vs-domain-layer\">Application layer vs domain layer?</a></li>\n<li><a href=\"https://softwareengineering.stackexchange.com/questions/293885/what-is-the-difference-between-business-and-application-logic\">What is the difference between business and application logic?</a></li>\n</ul>",
            "url": "http://localhost:3000/posts/20201206-domain-vs-application-logic",
            "title": "Domain vs Application Logic",
            "summary": "When defining a business problem and planning its solution, keep the two conversations separate...",
            "date_modified": "2020-12-06T20:05:00.000Z",
            "author": {
                "name": "Ben Johns",
                "url": "http://localhost:3000"
            }
        },
        {
            "id": "http://localhost:3000/posts/20201115-commands-and-queries-with-a-message-broker",
            "content_html": "<p>Modern message brokers provide many important benefits to a distributed system:</p>\n<ol>\n<li>Flexible Routing: support for multiple distribution modes (e.g. fan-out, round-robin, priority queues, etc)</li>\n<li>High-Throughput: designed for large scalable infrastructures</li>\n<li>Durability: resilient against intermittent network connections and provide message buffering during downstream service outages</li>\n<li>Service Decoupling: each system component only needs to know about the location of the broker and can be decoupled from other components</li>\n<li>Asynchronous Messaging: decoupling requests from responses frees up services so they don't need to wait for downstream replies</li>\n</ol>\n<p>On the other hand, message brokers add complexity and a single point of failure that must be managed, so may not be a great fit for systems that are small or have simple communication models. But those kinds of systems are no fun, are they? Larger systems gain a lot of architectural benefits, and the downsides can bit mitigated via clustering and redundancy, which all modern brokers support in some form.</p>\n<p>This post digs into asynchronous messaging flows to consider when using a message broker, and how async messaging can be implemented behind a synchronous API.</p>\n<h2 id=\"handling-large-data-sets\">Handling Large Data Sets</h2>\n<p>Many applications require processing on larger data sets like media file attachments, data migrations, or batch processing. Modern brokers are optimized for large numbers of small messages rather than the reverse, so it's not efficient to send the entire data set in one message. There are two standard approaches for handling this:</p>\n<h3 id=\"1-reference-message\">1. Reference Message</h3>\n<p>Store the data externally and send a message over the broker with a reference to the data.</p>\n<p>This approach works well if the entire data set needs to be consumed at once, like a file attachment. The data itself can be retrieved using a more appropriate protocol like FTP or HTTP. For example: a producer stores a file in an AWS S3 bucket, sends a message with the object's URI, and the consumer pulls the file back down from S3 when the message is received.</p>\n<h3 id=\"2-streaming\">2. Streaming</h3>\n<p>Split the data into chunks and stream them over multiple messages.</p>\n<p>This approach works well if the client can start processing the data without needing the entire set, like video streaming. This leans more heavily on the message broker, and the consumer needs to know how to reassemble the chunks.</p>\n<h2 id=\"commands-and-queries\">Commands and Queries</h2>\n<p>Even without using formal CQRS, it's still helpful to separate the concept of a command vs query message. Requests could come from any agent, be it an automated system or a user of a web app. Requests that modify the state of the system are <em>commands</em>; requests that retrieve data without modifying the system are <em>queries</em>. In event-driven systems, an <em>event</em> message type may be used to notify subscribers that a command has modified the state of the system. If any of these messages require a large amount of data to be sent over the wire, one of the approaches in the previous section should be used to keep payloads small and streamlined.</p>\n<h2 id=\"async-flows\">Async Flows</h2>\n<p>These messaging flows do not describe the various routing mechanisms that are possible with a message broker and only focus on the request and response flows.</p>\n<p>To relate the terms in this section to a client-server setup, the <em>producer</em> is the client sending requests, while the <em>consumer</em> is the server receiving requests and responding.</p>\n<h3 id=\"queries\">Queries</h3>\n<p>Queries are fairly straightforward, and there is really only one async flow, but consideration should be taken if the amount of data being returned is large (as described previously).</p>\n<ol>\n<li>Producer listens on a reply-to channel</li>\n<li>Producer sends query and includes a reference the reply-to channel</li>\n<li>Consumer processes query and sends query data back on the reply channel</li>\n<li>Producer receives data from the reply channel</li>\n</ol>\n<h3 id=\"commands\">Commands</h3>\n<p>Commands should not require synchronous replies, if possible. The success or failure result of the command should be handled asynchronously via one of the variants below. There are pragmatic approaches, however, to allow interoperability with synchronous web standards that return a success or failure result; these are discussed in the next section.</p>\n<h4 id=\"no-reply\">No Reply</h4>\n<p>This fire-and-forget approach only works if the producer does not care whether the command succeeded or failed.</p>\n<ol>\n<li>Producer sends command</li>\n<li>Consumer processes command, no reply necessary</li>\n</ol>\n<h4 id=\"poll-for-result\">Poll for Result</h4>\n<p>The producer must poll for a reply via a subsequent query, in this approach.</p>\n<ol>\n<li>Producer generates a unique ID for the command</li>\n<li>Producer sends command</li>\n<li>Consumer processes command, no reply necessary</li>\n<li>Producer polls via a query using the unique command ID</li>\n</ol>\n<h4 id=\"reply-via-events\">Reply via Events</h4>\n<p>Even if you're using an event-driven system, I don't recommend this approach, as it requires emitting an event on command success <em>and</em> on failure, which can clutter up the event streams. But in situations where a failed command truly represents a meaningful domain event, it could be useful.</p>\n<ol>\n<li>Producer listens for events</li>\n<li>Producer sends command</li>\n<li>Consumer processes command and publishes event</li>\n</ol>\n<h4 id=\"with-reply-to\">With Reply-To</h4>\n<p>This, in my opinion, is the cleanest approach to handling commands if the producer architecture supports listening. It also mirrors the asynchronous query flow.</p>\n<ol>\n<li>Producer listens on a reply-to channel</li>\n<li>Producer sends command and includes a reference to the reply channel</li>\n<li>Consumer processes command and sends reply upon completion</li>\n<li>Producer receives reply</li>\n</ol>\n<h2 id=\"web-frontend-flows\">Web Frontend Flows</h2>\n<p>The async flows described are all fine-and-dandy if the entire stack you are working with is setup for asynchronous messaging. But of course, we all have to make pragmatic concessions for the real world. As with any important architectural decision, the answer to which flow we should adopt is \"it depends\". For instance: we may have a fully asynchronous, distributed backend system that needs to support a synchronous HTTP 1.1 web API, or perhaps our legacy backend system has a web frontend that makes use of GraphQL subscriptions over web sockets. The following flows build upon the asynchronous flows and describe how they can be adapted to support a variety of common real-world communication patterns.</p>\n<h3 id=\"http-proxy-api-flows\">HTTP Proxy API Flows</h3>\n<p>These flows are useful to support a synchronous REST or GraphQL API, where the web clients do not listen for push messages.</p>\n<h4 id=\"api-with-http-proxy-flows\">API with HTTP Proxy Flows</h4>\n<p>Using an HTTP proxy layer insulates services from HTTP 1.1 so they can communicate solely with async messaging protocols, and it frees the frontend up to communicate via common synchronous web protocols like REST.</p>\n<h5 id=\"synchronous-command-or-query\">Synchronous Command or Query</h5>\n<p>Use a reverse proxy layer that waits for asynchronous replies:</p>\n<ol>\n<li>Web client makes API request</li>\n<li>Proxy sends an async command or query</li>\n<li>Proxy blocks and returns response from async command or query when it is returned via a separate asynchronous channel</li>\n</ol>\n<h5 id=\"asynchronous-command\">Asynchronous Command</h5>\n<p>Use a reverse proxy layer that simply converts to/from the message protocol for commands. The client is then responsible for asynchronously retrieving the command results:</p>\n<ol>\n<li>Web client makes API request</li>\n<li>Proxy sends async command with no reply expected</li>\n<li>Proxy immediately returns a 202 Accepted</li>\n<li>Web client polls for result using a Sync Query</li>\n</ol>\n<h3 id=\"direct-api-flows\">Direct API Flows</h3>\n<p>One option is to simply not use a message broker at all; the services themselves process a synchronous requests. This approach requires a load balancer for scaling.</p>\n<ol>\n<li>Web client makes API request</li>\n<li>API sends synchronous command or query directly to service</li>\n<li>Service processes command or query and synchronously replies</li>\n</ol>\n<h3 id=\"hybrid-flows\">Hybrid Flows</h3>\n<p>This hybrid approach uses both direct and proxy flows, and can work well with CQRS. The main benefit of this approach is to lighten the load on the message broker since it is only used for commands.</p>\n<ul>\n<li>Command: use one of the HTTP Proxy API flows</li>\n<li>Query: use the synchronous Direct API flow</li>\n</ul>\n<h3 id=\"web-socket-flows\">Web Socket Flows</h3>\n<p>If you're building a realtime web app whose users have highly available network connections and maintaining web socket connections is an option, this approach brings the full advantage of asynchronous messaging all the way to the web client.</p>\n<ul>\n<li>Backend routes bi-directional messages (via load balancer or routing layer that converts between web socket and internal messaging protocols)</li>\n<li>Frontend subscribes to queries that the backend will push to the client in realtime</li>\n</ul>",
            "url": "http://localhost:3000/posts/20201115-commands-and-queries-with-a-message-broker",
            "title": "Commands and Queries with a Message Broker",
            "summary": "Modern message brokers provide many important benefits to a distributed system...",
            "date_modified": "2020-11-15T19:13:00.008Z",
            "author": {
                "name": "Ben Johns",
                "url": "http://localhost:3000"
            }
        },
        {
            "id": "http://localhost:3000/posts/20201101-clean-architecture-and-solid-cheat-sheets",
            "content_html": "<blockquote>\n<p>Good architectures allow major architectural decisions to be deferred. The job of an architect is not to make decisions, the job of an architect is to defer decisions as long as possible to allow the program to be built in the absence of decisions, so that decisions can be made later with the most possible information.</p>\n</blockquote>\n<p><em>— Robert C Martin, <a href=\"https://www.youtube.com/watch?v=o_TH-Y78tt4\">The Principles of Clean Architecture, Norwich UK, 2015</a></em></p>\n<h2 id=\"sources-from-uncle-bob\">Sources from Uncle Bob</h2>\n<ul>\n<li>Book: <a href=\"https://www.amazon.com/Clean-Architecture-Craftsmans-Software-Structure/dp/0134494164\">Clean Architecture: A Craftsman's Guide to Software Structure and Design</a></li>\n<li>Blog: <a href=\"https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html\">The Clean Architecture, 13 August 2012</a></li>\n<li>Talk: <a href=\"https://www.youtube.com/watch?v=o_TH-Y78tt4\">The Principles of Clean Architecture by Uncle Bob Martin, Norwich UK, 2015</a></li>\n</ul>\n<h2 id=\"solid-design-principles\">SOLID Design Principles</h2>\n<h4 id=\"srp-single-responsibility-principle\">SRP: Single Responsibility Principle</h4>\n<p>Does <em>not</em> necessarily mean that a module should do just one thing, but that a module should have only one reason to change.</p>\n<h4 id=\"ocp-open-closed-principle\">OCP: Open-Closed Principle</h4>\n<p>A module's behavior can be modified without modifying the core code; class inheritance and composition. For example: to swap out a DB implementation, the business logic should not need to be modified.</p>\n<h4 id=\"lsp-liskov-substitution-principle\">LSP: Liskov Substitution Principle</h4>\n<p>Concrete implementations must adhere to the expected interface contracts.</p>\n<h4 id=\"isp-interface-segregation-principle\">ISP: Interface Segregation Principle</h4>\n<p>Keep interfaces small!</p>\n<h4 id=\"dip-dependency-inversion-principle\">DIP: Dependency Inversion Principle</h4>\n<ul>\n<li>Interface abstractions are more stable (change less frequently) than concrete implementations</li>\n<li>Use the factory pattern to keep concrete implementations out of business logic</li>\n<li>Use a small number of concrete \"main\" components, where all DIP violations are gathered</li>\n</ul>\n<h2 id=\"architecture\">Architecture</h2>\n<blockquote>\n<p>The goal of software architecture is to minimize the human resources required to build and maintain the required system.</p>\n</blockquote>\n<p><em>— Robert C Martin, <a href=\"https://www.amazon.com/Clean-Architecture-Craftsmans-Software-Structure/dp/0134494164\">Clean Architecture: A Craftsman's Guide to Software Structure and Design</a></em></p>\n<p>Two words \"soft\" and \"ware\" mean an easily changeable product.</p>\n<p>The \"policy\" (i.e. business logic) is essential; the \"details\" (e.g. I/O, frameworks, protocols, etc) are irrelevant to it.</p>\n<p>Defer architectural decisions as long as you can, so you have the most information possible. For example, wait to choose a DB technology and web framework until the core business app is built.</p>\n<blockquote>\n<p>A good architecture maximizes the number of decisions <em>not</em> made. And you achieve that by using a plugin model.</p>\n</blockquote>\n<p><em>— Robert C Martin, <a href=\"https://www.youtube.com/watch?v=o_TH-Y78tt4\">The Principles of Clean Architecture, Norwich UK, 2015</a></em></p>\n<h3 id=\"dependency-inversion\">Dependency Inversion</h3>\n<ul>\n<li>UI, frameworks, persistence/database, etc <em>depend</em> on the business logic (not the other way around).</li>\n<li>Only inject some strategies and factories, keep it limited.</li>\n<li>Do <em>not</em> inject your business logic directly into the app. Instead, inject into a plugin abstraction, then the plugin distributes objects. This is so business logic and its tests do not need to know about injection framework.</li>\n<li>Do <em>not</em> couple your app to the framework, keep it at arms length.</li>\n</ul>\n<p><img src=\"http://localhost:3000//images/posts/2019-01-26%20Clean%20Architecture%20Diagram.png\" alt=\"\"></p>\n<h3 id=\"business-logic-at-a-glance-source-code-structure\">Business Logic at a Glance: Source Code Structure</h3>\n<p>Someone new looking at the code should primarily see the <em>business logic</em>; the technical implementation details should be hidden away.</p>\n<ul>\n<li>Primary focus of structure should be to describe the business domain</li>\n<li>Implementation details should be low-level and should take a back-seat to domain logic in source code</li>\n</ul>\n<h2 id=\"printable-cheat-sheets\">Printable Cheat Sheets</h2>\n<h3 id=\"solid-design-principles-1\">SOLID Design Principles</h3>\n<div class=\"max-w-80\"><a href=\"http://localhost:3000//images/posts/2020-11-01%20SOLID%20Design%20Principles%20Cheat%20Sheet.png\"><img src=\"http://localhost:3000//images/posts/2020-11-01%20SOLID%20Design%20Principles%20Cheat%20Sheet.png\" alt=\"\"></a></div>\n<h3 id=\"clean-architecture-black--white\">Clean Architecture Black &amp; White</h3>\n<div class=\"max-w-80\"><a href=\"http://localhost:3000//images/posts/2019-01-26%20Clean%20Architecture%20Cheatsheet%20B%20and%20W.png\"><img src=\"http://localhost:3000//images/posts/2019-01-26%20Clean%20Architecture%20Cheatsheet%20B%20and%20W.png\" alt=\"\"></a></div>\n<h3 id=\"clean-architecture-diagram\">Clean Architecture Diagram</h3>\n<div class=\"max-w-80 bg-white rounded-lg\"><a href=\"http://localhost:3000//images/posts/2019-01-26%20Clean%20Architecture%20Diagram.png\"><img src=\"http://localhost:3000//images/posts/2019-01-26%20Clean%20Architecture%20Diagram.png\" alt=\"\"></a></div>\n<h3 id=\"clean-architecture-diagram-with-text\">Clean Architecture Diagram with Text</h3>\n<div class=\"max-w-96 bg-white rounded-lg\"><a href=\"http://localhost:3000//images/posts/2019-01-26%20Clean%20Architecture%20Diagram%20with%20Text.png\"><img src=\"http://localhost:3000//images/posts/2019-01-26%20Clean%20Architecture%20Diagram%20with%20Text.png\" alt=\"\"></a></div>",
            "url": "http://localhost:3000/posts/20201101-clean-architecture-and-solid-cheat-sheets",
            "title": "Clean Architecture and SOLID Cheat Sheets",
            "summary": "Printable cheat sheets to help remember some of Uncle Bob's valuable contributions to the industry",
            "date_modified": "2020-11-01T17:39:00.004Z",
            "author": {
                "name": "Ben Johns",
                "url": "http://localhost:3000"
            }
        },
        {
            "id": "http://localhost:3000/posts/20191215-why-terraform",
            "content_html": "<p>Terraform leads the way in the infrastructure-as-code world; I've been using it exclusively for my personal projects and wherever I can at work. It provides peace of mind during deployments, stabilizes build pipelines, and helps speed up my adoption of cloud infrastructure. It's no silver bullet, but it's an excellent tool that solves an increasingly complex problem.</p>\n<h3 id=\"history-of-the-problem\">History of the Problem</h3>\n<p>In traditional applications and old-school organizations, there are extreme difficulties managing on-premise infrastructure:</p>\n<ol>\n<li>Costly hardware installations, operations, and training</li>\n<li>Slow reaction to scaling needs</li>\n<li>Wasted extra capacity</li>\n<li>Manual configuration</li>\n<li>Fixed ops team resources</li>\n<li>Tickets submitted in a queue means long wait times to make changes</li>\n</ol>\n<p>The first 3 are problems that cloud infrastructure and IaaS has been solving for years now. Most modern companies are leveraging the power of cloud providers to fulfill much of their infrastructure needs nowadays. But cloud services don't solve issues #4, 5, or 6 so companies still struggle with:</p>\n<ul>\n<li>Difficulty scheduling infrastructure changes alongside application changes</li>\n<li>Sluggish reaction time when things go wrong</li>\n<li>Overhead managing ops teams</li>\n</ul>\n<p>Additionally, increasing adoption of microservices and serverless introduces new complexities:</p>\n<ul>\n<li>Many small, incremental deployments</li>\n<li>Polyglot data</li>\n<li>Highly abstracted infrastructure</li>\n<li>Cloud vendor lock-in</li>\n</ul>\n<h4 id=\"enter-infrastructure-as-code\">Enter Infrastructure as Code</h4>\n<p>Infrastructure as code tools help organizations address these issues head-on by encoding all infrastructure changes as human-readable code in a consistent way. This provides the benefits of:</p>\n<ul>\n<li>Efficient and predictable deployments</li>\n<li>Change tracking</li>\n<li>Automation</li>\n<li>Robust disaster recovery</li>\n<li>Ease of creating and destroying infrastructure</li>\n<li>Enabling self-service</li>\n</ul>\n<p><a href=\"https://www.terraform.io/\">Hashicorp's Terraform</a> has quickly become the industry standard solution. It not only provides the previous benefits, but also helps fight against vendor lock-in by supporting a huge number of providers with the ability to write your own.</p>\n<h3 id=\"example\">Example</h3>\n<p><a href=\"https://github.com/benjohns1/terraform-example\">https://github.com/benjohns1/terraform-example</a></p>\n<p>In the example above, there's a tiny serverless application written in Go that runs on AWS Lambda and API Gateway. It can be built locally from the app/build directory. For deployment, Terraform configurations in the app/deploy define the application zip file to upload to AWS Lambda, and some basic settings for the API Gateway.</p>\n<p>The Terraform module in module/aws-serverless-app generically describes what infrastructure is needed in AWS to expose a lambda function behind an API. The app uses this module and passes the specific parameters for itself.</p>\n<p>This modular architecture allows us to encapsulate and reuse portions of our infrastructure code. You can imagine multiple apps that provide different business functionality, but all run on lambda behind an API gateway; the aws-serverless-app module could be reused to deploy all of them.</p>\n<p>This example was derived directly from Yevgeniy Brikman's excellent talk on <a href=\"https://www.youtube.com/watch?v=xhHOW0EF5u8\">Automated Testing for Terraform, Docker, Packer, Kubernetes, and More</a></p>\n<ul>\n<li><a href=\"https://github.com/gruntwork-io/infrastructure-as-code-testing-talk\">https://github.com/gruntwork-io/infrastructure-as-code-testing-talk</a></li>\n</ul>",
            "url": "http://localhost:3000/posts/20191215-why-terraform",
            "title": "Why Terraform?",
            "summary": "Terraform leads the way in the infrastructure-as-code world...",
            "date_modified": "2019-12-25T15:39:00.000Z",
            "author": {
                "name": "Ben Johns",
                "url": "http://localhost:3000"
            }
        },
        {
            "id": "http://localhost:3000/posts/20190903-45-north-solutions",
            "content_html": "<p>Founded by myself and two business partners in 2013, we cultivated long-lasting partnerships with public and private sector clients across multiple industries. We solved business problems using a range of cloud, in-house, and custom integrated solutions, primary around the Oracle RightNow CRM solution and general software system development. 45 North eventually was sold to <a href=\"https://www.cpi.solutions/\">CPI.Solutions</a> in 2019.</p>\n<h3 id=\"cxdev-community\">CXDev Community</h3>\n<p>We regularly wrote content for the CXDeveloper blog and moderated discussions. It became a valuable resource to the community of Oracle RightNow developers, consultants, and clients.</p>",
            "url": "http://localhost:3000/posts/20190903-45-north-solutions",
            "title": "45 North Solutions",
            "summary": "Consulting and contract work",
            "date_modified": "2019-09-03T00:00:00.000Z",
            "author": {
                "name": "Ben Johns",
                "url": "http://localhost:3000"
            }
        },
        {
            "id": "http://localhost:3000/posts/20190902-scheduled-tasks",
            "content_html": "<p>A good ol' task app... but with a scheduler!</p>\n<ul>\n<li>Designed with DDD</li>\n<li>Built with TDD/BDD</li>\n<li>Svelte Sapper front-end</li>\n<li>Front-end testing with Cypress</li>\n<li>Go API and scheduler back-end</li>\n<li>Infrastructure with Terraform and Docker on AWS</li>\n</ul>\n<p><a href=\"https://github.com/benjohns1/scheduled-tasks\">View Source</a></p>",
            "url": "http://localhost:3000/posts/20190902-scheduled-tasks",
            "title": "Scheduled Tasks",
            "summary": "Web app for personal task scheduling",
            "date_modified": "2019-09-02T00:00:00.000Z",
            "author": {
                "name": "Ben Johns",
                "url": "http://localhost:3000"
            }
        },
        {
            "id": "http://localhost:3000/posts/20190822-nextjs-with-typescript-material-ui-and-jest",
            "content_html": "<p>I was looking for a quick and easy way to put together a personal static site and <em>almost</em> went with Svelte Sapper because I've been enjoying it so much using it for another side project. But in the end I decided to use Next.js instead because it has been around for a while (Sapper is modeled after it), it is so incredibly easy to deploy using Zeit's Now for free, and I wanted to use TypeScript without the hassle of trying to get it to work with Svelte (which apparently <em>is</em> possible). I also wanted to brush up on React since it had been a while.</p>\n<p>Here's my target front-end stack:</p>\n<ul>\n<li>\n<p><a href=\"https://github.com/zeit/next.js\">Next.js</a></p>\n</li>\n<li>\n<p><a href=\"https://www.typescriptlang.org/\">TypeScript</a></p>\n</li>\n<li>\n<p><a href=\"https://material-ui.com/\">Material UI</a></p>\n</li>\n<li>\n<p><a href=\"https://jestjs.io/\">Jest</a> with <a href=\"https://airbnb.io/enzyme/\">Enzyme</a></p>\n</li>\n</ul>\n<p>After working with the Next.js and Material UI examples to get a good starting template, here's the final result, which I plan on starting with for static sites moving forward:</p>\n<p><a href=\"https://github.com/benjohns1/next-ts-mui-jest-template\">github.com/benjohns1/next-ts-mui-jest-template</a> <a href=\"https://github.com/benjohns1/next-ts-mui-jest-template\"><img src=\"http://localhost:3000//images/posts/template-screenshot.png\" alt=\"\"></a></p>\n<p>Grab it and try it out yourself!</p>\n<pre><code>npx degit https://github.com/benjohns1/next-ts-mui-jest-template my-project\ncd my-project\nnpm i\nnpm run dev\n\n</code></pre>",
            "url": "http://localhost:3000/posts/20190822-nextjs-with-typescript-material-ui-and-jest",
            "title": "Next.js with TypeScript, Material UI, and Jest",
            "summary": "I was looking for a quick and easy way to put together a personal static site and...",
            "date_modified": "2019-08-22T17:35:00.001Z",
            "author": {
                "name": "Ben Johns",
                "url": "http://localhost:3000"
            }
        },
        {
            "id": "http://localhost:3000/posts/20190815-htn-planner",
            "content_html": "<p>Automated hierarchical task network planner</p>\n<ul>\n<li>Written in TypeScript</li>\n<li>Encode the problem domain as a set of simple and compound tasks</li>\n<li>The network determines how best to decompose a goal task into an optimal plan</li>\n</ul>\n<p><a href=\"https://github.com/benjohns1/htn-planner\">View Source</a></p>",
            "url": "http://localhost:3000/posts/20190815-htn-planner",
            "title": "HTN Planner",
            "summary": "Javascript package to automate hierarchical task network planning",
            "date_modified": "2019-08-15T00:00:00.000Z",
            "author": {
                "name": "Ben Johns",
                "url": "http://localhost:3000"
            }
        },
        {
            "id": "http://localhost:3000/posts/20190621-setting-up-cypress-for-sveltes-sapper",
            "content_html": "<p>A few weeks ago, I decided to try <a href=\"https://svelte.dev/\">Svelte</a>'s <a href=\"https://sapper.svelte.dev/\">Sapper framework</a> to handle the front-end of a simple app. I'm using this small project to try out some new technologies and to practice TDD/BDD. I had already built a back-end API in Go so just needed to build and wire-up a UI. I don't have a lot of experience in modern front-end tech or end-to-end testing, so I was excited to see that Sapper comes ready-to-use with the <a href=\"https://www.cypress.io/\">Cypress test framework</a>. I was able to write some simple BDD(ish) tests to define the functionality I wanted and then implement in Svelte fairly seamlessly. Overall this was a natural and fluid flow, after overcoming a small gotcha.</p>\n<h3 id=\"cypress-tests-stall-after-visiting-new-pages\">Cypress Tests Stall After Visiting New Pages</h3>\n<p>Most of my tests started with a cy.visit(url) to ensure a fresh page reload, but I quickly found that any click or DOM action within my Svelte components timed-out and failed sporadically, but frequently:<br>\nCypressError: Timed out retrying: Expected to find [...]</p>\n<p>I believe this was due to the fact that Sapper does an excellent job of preloading and chunking out the app code and data asynchronously, so Cypress identified that the page was completely loaded and continued with the test script before all of the Sapper app chunks had actually been fully loaded.</p>\n<p>Initially, I solved this with a hacky cy.visit(url).wait(1000) that would wait for 1 second after the page loaded. Using wait() for something like this is pretty horrible practice, but it allowed me to continue development. But anyone who has worked with UI or E2E testing knows that one of the biggest issues is the time it takes to run them. Even with my little app only partially completed, testing time quickly ballooned out to over a minute to run all the tests due to the full second of wait time.</p>\n<h4 id=\"solution\">Solution</h4>\n<p>My final solution uses Svelte's lifecycle functions to set a DOM attribute when all components are available. Use the onMount() function in the top-level routes/_layout.svelte component, wait an additional tick() to ensure all child components had been loaded, then set an attribute in the DOM that Cypress can easily check:</p>\n<pre><code class=\"language-svelte\"><span class=\"xml\">\n</span><span class=\"xml\">// File: src/routes/_layout.svelte\n</span><span class=\"xml\">\n</span><span class=\"xml\"></span><span class=\"xml\">&lt;</span><span class=\"xml\">script</span><span class=\"xml\">&gt;</span><span class=\"xml javascript\">\n</span><span class=\"xml javascript\">\t</span><span class=\"xml javascript\">import</span><span class=\"xml javascript\"> Nav </span><span class=\"xml javascript\">from</span><span class=\"xml javascript\"> </span><span class=\"xml javascript\">'../components/Nav.svelte'</span><span class=\"xml javascript\">;\n</span><span class=\"xml javascript\">\t</span><span class=\"xml javascript\">import</span><span class=\"xml javascript\"> </span><span>{ onMount, tick }</span><span class=\"xml javascript\"> </span><span class=\"xml javascript\">from</span><span class=\"xml javascript\"> </span><span class=\"xml javascript\">'svelte'</span><span class=\"xml javascript\">;\n</span><span class=\"xml\">\n</span><span class=\"xml javascript\">\t</span><span class=\"xml javascript\">export</span><span class=\"xml javascript\"> </span><span class=\"xml javascript\">let</span><span class=\"xml javascript\"> segment;\n</span><span class=\"xml\">\n</span><span class=\"xml javascript\">\t</span><span class=\"xml javascript\">let</span><span class=\"xml javascript\"> testID = </span><span class=\"xml javascript\">'loading'</span><span class=\"xml javascript\">;\n</span><span class=\"xml javascript\">\tonMount(</span><span class=\"xml javascript hljs-function\">() =&gt;</span><span class=\"xml javascript\"> </span><span>{\n</span><span class=\"xml\">\t\ttick().then(() =&gt; {\n</span><span class=\"xml\">\t\t\ttestID = 'loaded';\n</span><span>\t\t}</span><span class=\"xml\">);\n</span><span class=\"xml\">\t});\n</span><span class=\"xml\"></span><span class=\"xml\">&lt;/</span><span class=\"xml\">script</span><span class=\"xml\">&gt;</span><span class=\"xml\">\n</span><span class=\"xml\">\n</span><span class=\"xml\"></span><span class=\"xml\">&lt;</span><span class=\"xml\">style</span><span class=\"xml\">&gt;</span><span class=\"xml\">\n</span><span class=\"xml\">  ...\n</span><span class=\"xml\"></span><span class=\"xml\">&lt;/</span><span class=\"xml\">style</span><span class=\"xml\">&gt;</span><span class=\"xml\">\n</span><span class=\"xml\">\n</span><span class=\"xml\"></span><span class=\"xml\">&lt;</span><span class=\"xml\">Nav</span><span class=\"xml\"> </span><span>{segment}</span><span class=\"xml\">/&gt;</span><span class=\"xml\">\n</span><span class=\"xml\">\n</span><span class=\"xml\"></span><span class=\"xml\">&lt;</span><span class=\"xml\">main</span><span class=\"xml\"> </span><span class=\"xml hljs-attr\">data-test</span><span class=\"xml\">=</span><span>{testID}</span><span class=\"xml\">&gt;</span><span class=\"xml\">\n</span><span class=\"xml\">\t</span><span class=\"xml\">&lt;</span><span class=\"xml\">slot</span><span class=\"xml\">&gt;</span><span class=\"xml\">&lt;/</span><span class=\"xml\">slot</span><span class=\"xml\">&gt;</span><span class=\"xml\">\n</span><span class=\"xml\"></span><span class=\"xml\">&lt;/</span><span class=\"xml\">main</span><span class=\"xml\">&gt;</span><span class=\"xml\">\n</span><span class=\"xml\"></span></code></pre>\n<p>In Cypress create a simple command called visitWait or similar that waits for the correct attribute value:</p>\n<pre><code class=\"language-javascript\"><span>\n</span><span></span><span>// File: cypress/support/commands.js</span><span>\n</span>\n<span>Cypress.Commands.add(</span><span>\"visitWait\"</span><span>, </span><span class=\"hljs-function\">(</span><span class=\"hljs-function\">url, options</span><span class=\"hljs-function\">) =&gt;</span><span> {\n</span>  cy.visit(url, options);\n<span>  cy.get(</span><span>'[data-test=loaded]'</span><span>);\n</span>});\n</code></pre>\n<p>In your tests, simply use cy.visitWait(url) as you would normally use cy.visit(url) and Cypress will wait just long enough for all the Svelte components to load before continuing with your test script.</p>",
            "url": "http://localhost:3000/posts/20190621-setting-up-cypress-for-sveltes-sapper",
            "title": "Setting Up Cypress for Svelte's Sapper",
            "summary": "A few weeks ago, I decided to try Svelte's Sapper framework to handle the front-end of a simple app...",
            "date_modified": "2019-06-22T00:20:00.001Z",
            "author": {
                "name": "Ben Johns",
                "url": "http://localhost:3000"
            }
        },
        {
            "id": "http://localhost:3000/posts/00000000-blog-archive",
            "content_html": "<p>Read my older blog posts on <a href=\"https://blog.bennyjohns.com\">blog.bennyjohns.com</a></p>",
            "url": "http://localhost:3000/posts/00000000-blog-archive",
            "title": "Blog Archive",
            "summary": "Old blogger posts",
            "date_modified": "2019-06-01T08:00:00.000Z",
            "author": {
                "name": "Ben Johns",
                "url": "http://localhost:3000"
            }
        },
        {
            "id": "http://localhost:3000/posts/20190516-factored",
            "content_html": "<p>Survive and build a factory on a hostile world</p>\n<ul>\n<li>Built in Unreal Engine with blueprints visual scripting</li>\n<li>Item crafting tree</li>\n<li>Structure building system with rotation and plugin enhancements</li>\n<li>Connectable conveyors and factory inputs/outputs</li>\n<li>Inventory system with item filtering</li>\n<li>Tutorial missions</li>\n</ul>\n<p><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" class=\"btn me-4 mb-4 border-none text-sm hover:bg-primary btn-primary\" href=\"https://pilotwavegames.itch.io/factored\">Download at Itch.io</a>\n<a href=\"https://github.com/benjohns1/factored\">View Source</a></p>",
            "url": "http://localhost:3000/posts/20190516-factored",
            "title": "Factored",
            "summary": "3D survival factory game prototype",
            "date_modified": "2019-05-16T00:00:00.000Z",
            "author": {
                "name": "Ben Johns",
                "url": "http://localhost:3000"
            }
        },
        {
            "id": "http://localhost:3000/posts/20180927-procedural-landmass-generation",
            "content_html": "<p>Procedurally generate 3D terrain</p>\n<ul>\n<li>Built in Unity with C#</li>\n<li>Layered noise functions</li>\n<li>Height and biome based texturing</li>\n<li>Based on and extended from <a href=\"https://www.youtube.com/playlist?list=PLFt_AvWsXl0eBW2EiBtl_sxmDtSgZBxB3\">Sebastian Lague's excellent tutorial series</a></li>\n</ul>\n<p><a href=\"https://github.com/benjohns1/procedural-landmass-generation\">View Source</a></p>",
            "url": "http://localhost:3000/posts/20180927-procedural-landmass-generation",
            "title": "Procedural Landmass Generation",
            "summary": "Procedurally generate 3D terrain",
            "date_modified": "2018-09-27T00:00:00.000Z",
            "author": {
                "name": "Ben Johns",
                "url": "http://localhost:3000"
            }
        },
        {
            "id": "http://localhost:3000/posts/20180923-procedural-planet-generation",
            "content_html": "<p>Procedurally generate a spherical planet</p>\n<ul>\n<li>Built in Unity with C#</li>\n<li>Based on and extended from <a href=\"https://www.youtube.com/playlist?list=PLFt_AvWsXl0cONs3T0By4puYy6GM22ko8\">Sebastian Lague's excellent tutorial series</a></li>\n</ul>\n<p><a href=\"https://github.com/benjohns1/procedural-planet\">View Source</a></p>",
            "url": "http://localhost:3000/posts/20180923-procedural-planet-generation",
            "title": "Procedural Planet Generation",
            "summary": "Procedurally generate a spherical planet",
            "date_modified": "2018-09-23T00:00:00.000Z",
            "author": {
                "name": "Ben Johns",
                "url": "http://localhost:3000"
            }
        },
        {
            "id": "http://localhost:3000/posts/20180922-gas-voxel-sim",
            "content_html": "<p>Simulate gas mixing with 3D voxels</p>\n<ul>\n<li>Built in Unity with C#</li>\n<li>Calculates dissipation and mixing of up to 4 gases in each voxel over time</li>\n</ul>\n<p><a href=\"https://github.com/benjohns1/gas-voxel-sim\">View Source</a></p>",
            "url": "http://localhost:3000/posts/20180922-gas-voxel-sim",
            "title": "Gas Voxel Sim",
            "summary": "Simulate gas mixing with 3D voxels",
            "date_modified": "2018-09-22T00:00:00.000Z",
            "author": {
                "name": "Ben Johns",
                "url": "http://localhost:3000"
            }
        },
        {
            "id": "http://localhost:3000/posts/20180616-speed-craft-runner",
            "content_html": "<p>Race along a lonely and dreamlike path that winds its way through light and mist</p>\n<ul>\n<li>Built in Unreal Engine</li>\n<li>Level tiles, color themes, &amp; item pickups all procedurally generated</li>\n</ul>\n<p><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" class=\"btn me-4 mb-4 border-none text-sm hover:bg-primary btn-primary\" href=\"https://pilotwavegames.itch.io/speed-craft-runner\">Download at Itch.io</a>\n<a href=\"https://github.com/benjohns1/speedcraftrunner\">View Source</a></p>",
            "url": "http://localhost:3000/posts/20180616-speed-craft-runner",
            "title": "Speed Craft Runner",
            "summary": "3D racing game prototype",
            "date_modified": "2018-06-16T00:00:00.000Z",
            "author": {
                "name": "Ben Johns",
                "url": "http://localhost:3000"
            }
        },
        {
            "id": "http://localhost:3000/posts/20180205-bubble-builder",
            "content_html": "<p>Collect colorful resources and build a base</p>\n<ul>\n<li>Built with Phaser.js</li>\n</ul>\n<p><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" class=\"btn me-4 mb-4 border-none text-sm hover:bg-primary btn-primary\" href=\"https://pilotwavegames.itch.io/bubble-builder\">Play on Itch.io</a>\n<a href=\"https://github.com/benjohns1/bubble-builder\">View Source</a></p>",
            "url": "http://localhost:3000/posts/20180205-bubble-builder",
            "title": "Bubble Builder",
            "summary": "2D survival game prototype",
            "date_modified": "2018-02-05T00:00:00.000Z",
            "author": {
                "name": "Ben Johns",
                "url": "http://localhost:3000"
            }
        },
        {
            "id": "http://localhost:3000/posts/20180130-crypto-watcher",
            "content_html": "<p>Simplest way to watch your favorite cryptocurrencies</p>\n<ul>\n<li>Built with Cycle.js, Immutable.js, and Bootstrap 4</li>\n<li>Reactive programming</li>\n<li>Functional programming</li>\n</ul>\n<p><a href=\"https://github.com/benjohns1/crypto-watcher\">View Source</a></p>",
            "url": "http://localhost:3000/posts/20180130-crypto-watcher",
            "title": "Crypto Watcher",
            "summary": "Static web app to watch cryptocurrency prices",
            "date_modified": "2018-01-30T00:00:00.000Z",
            "author": {
                "name": "Ben Johns",
                "url": "http://localhost:3000"
            }
        },
        {
            "id": "http://localhost:3000/posts/20171224-genetic-seeker",
            "content_html": "<p>Genetic algorithm searches for the optimal path to a goal</p>\n<ul>\n<li>Built with p5.js</li>\n<li>Evolutionary algorithm experimentation</li>\n<li>\"DNA\" encodes the path each agent will attempt during its lifetime</li>\n<li>Mutation rates</li>\n<li>Agent DNA recombination</li>\n</ul>\n<p><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" class=\"btn me-4 mb-4 border-none text-sm hover:bg-primary btn-primary\" href=\"https://pilotwavegames.itch.io/genetic-seeker\">Play on Itch.io</a>\n<a href=\"https://github.com/benjohns1/genetic-seeker\">View Source</a></p>",
            "url": "http://localhost:3000/posts/20171224-genetic-seeker",
            "title": "Genetic Seeker",
            "summary": "2D AI simulation",
            "date_modified": "2017-12-24T10:00:00.000Z",
            "author": {
                "name": "Ben Johns",
                "url": "http://localhost:3000"
            }
        },
        {
            "id": "http://localhost:3000/posts/20171224-spinner-viz",
            "content_html": "<p>Retro screensaver awesomeness</p>\n<ul>\n<li>Built with p5.js</li>\n<li>Interesting patterns emerge from pseudo-random rotation rates</li>\n</ul>\n<p><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" class=\"btn me-4 mb-4 border-none text-sm hover:bg-primary btn-primary\" href=\"https://benjohns1.github.io/p5-random-spinner-viz/index.html\">Live Demo</a>\n<a href=\"https://github.com/benjohns1/p5-random-spinner-viz\">View Source</a></p>",
            "url": "http://localhost:3000/posts/20171224-spinner-viz",
            "title": "Spinner Visualization",
            "summary": "Retro screensaver awesomeness Built with p5.js Interesting patterns emerge from pseudo-random rotation rates Live Demo View Source...",
            "date_modified": "2017-12-24T09:00:00.000Z",
            "author": {
                "name": "Ben Johns",
                "url": "http://localhost:3000"
            }
        },
        {
            "id": "http://localhost:3000/posts/20171201-pilot-wave-games",
            "content_html": "<p>Game and simulation development for fun and profit!</p>\n<p><a href=\"https://pilotwavegames.com\">pilotwavegames.com</a></p>\n<ul>\n<li>Unity</li>\n<li>Unreal Engine</li>\n<li>JavaScript</li>\n</ul>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" class=\"btn me-4 mb-4 border-none text-sm hover:bg-primary btn-primary\" href=\"https://pilotwavegames.itch.io\">Visit on Itch.io</a>",
            "url": "http://localhost:3000/posts/20171201-pilot-wave-games",
            "title": "Introducing Pilot Wave Games",
            "summary": "Game and simulation development for fun and profit!",
            "date_modified": "2017-12-20T00:00:00.000Z",
            "author": {
                "name": "Ben Johns",
                "url": "http://localhost:3000"
            }
        },
        {
            "id": "http://localhost:3000/posts/20121201-oracle-rightnow-technologies",
            "content_html": "<h3 id=\"professional-services\">Professional Services</h3>\n<p>RightNow Technologies was a CRM software provider purchased by Oracle in 2012. As a technical consultant there from August 2010 through December 2012, I worked closely with clients throughout discovery, design, implementation, and support of custom integration solutions. I worked on and eventually led large projects in the financial, health, and public sectors.</p>",
            "url": "http://localhost:3000/posts/20121201-oracle-rightnow-technologies",
            "title": "Oracle & RightNow Technologies",
            "summary": "Professional services",
            "date_modified": "2012-12-01T17:00:00.000Z",
            "author": {
                "name": "Ben Johns",
                "url": "http://localhost:3000"
            }
        },
        {
            "id": "http://localhost:3000/posts/20100801-freelancer-musician",
            "content_html": "<p>While in college, I worked as a freelance web developer providing web, storefront, and UI design solutions for small businesses. I developed a custom MVC PHP framework to make web development easier. During this time, I was also playing in professional bands and teaching private music lessons.</p>",
            "url": "http://localhost:3000/posts/20100801-freelancer-musician",
            "title": "Freelance Work",
            "summary": "Web development & music",
            "date_modified": "2010-08-01T17:00:00.000Z",
            "author": {
                "name": "Ben Johns",
                "url": "http://localhost:3000"
            }
        }
    ]
}